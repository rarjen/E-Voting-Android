// Generated by view binder compiler. Do not edit!
package com.example.evoting.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.evoting.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CardResultCandidateBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView candidateImg;

  @NonNull
  public final TextView candidateNumber;

  @NonNull
  public final TextView capres;

  @NonNull
  public final MaterialCardView card;

  @NonNull
  public final TextView cawapres;

  @NonNull
  public final View separatorLine;

  @NonNull
  public final View separatorLine1;

  @NonNull
  public final TextView tvIndicatorPercentage;

  @NonNull
  public final TextView tvTotalVote;

  @NonNull
  public final TextView valueTotalSuara;

  @NonNull
  public final LinearProgressIndicator votePercentage;

  private CardResultCandidateBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView candidateImg, @NonNull TextView candidateNumber, @NonNull TextView capres,
      @NonNull MaterialCardView card, @NonNull TextView cawapres, @NonNull View separatorLine,
      @NonNull View separatorLine1, @NonNull TextView tvIndicatorPercentage,
      @NonNull TextView tvTotalVote, @NonNull TextView valueTotalSuara,
      @NonNull LinearProgressIndicator votePercentage) {
    this.rootView = rootView;
    this.candidateImg = candidateImg;
    this.candidateNumber = candidateNumber;
    this.capres = capres;
    this.card = card;
    this.cawapres = cawapres;
    this.separatorLine = separatorLine;
    this.separatorLine1 = separatorLine1;
    this.tvIndicatorPercentage = tvIndicatorPercentage;
    this.tvTotalVote = tvTotalVote;
    this.valueTotalSuara = valueTotalSuara;
    this.votePercentage = votePercentage;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CardResultCandidateBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CardResultCandidateBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.card_result_candidate, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CardResultCandidateBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.candidateImg;
      ImageView candidateImg = ViewBindings.findChildViewById(rootView, id);
      if (candidateImg == null) {
        break missingId;
      }

      id = R.id.candidateNumber;
      TextView candidateNumber = ViewBindings.findChildViewById(rootView, id);
      if (candidateNumber == null) {
        break missingId;
      }

      id = R.id.capres;
      TextView capres = ViewBindings.findChildViewById(rootView, id);
      if (capres == null) {
        break missingId;
      }

      id = R.id.card;
      MaterialCardView card = ViewBindings.findChildViewById(rootView, id);
      if (card == null) {
        break missingId;
      }

      id = R.id.cawapres;
      TextView cawapres = ViewBindings.findChildViewById(rootView, id);
      if (cawapres == null) {
        break missingId;
      }

      id = R.id.separatorLine;
      View separatorLine = ViewBindings.findChildViewById(rootView, id);
      if (separatorLine == null) {
        break missingId;
      }

      id = R.id.separatorLine1;
      View separatorLine1 = ViewBindings.findChildViewById(rootView, id);
      if (separatorLine1 == null) {
        break missingId;
      }

      id = R.id.tvIndicatorPercentage;
      TextView tvIndicatorPercentage = ViewBindings.findChildViewById(rootView, id);
      if (tvIndicatorPercentage == null) {
        break missingId;
      }

      id = R.id.tvTotalVote;
      TextView tvTotalVote = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalVote == null) {
        break missingId;
      }

      id = R.id.valueTotalSuara;
      TextView valueTotalSuara = ViewBindings.findChildViewById(rootView, id);
      if (valueTotalSuara == null) {
        break missingId;
      }

      id = R.id.votePercentage;
      LinearProgressIndicator votePercentage = ViewBindings.findChildViewById(rootView, id);
      if (votePercentage == null) {
        break missingId;
      }

      return new CardResultCandidateBinding((ConstraintLayout) rootView, candidateImg,
          candidateNumber, capres, card, cawapres, separatorLine, separatorLine1,
          tvIndicatorPercentage, tvTotalVote, valueTotalSuara, votePercentage);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
